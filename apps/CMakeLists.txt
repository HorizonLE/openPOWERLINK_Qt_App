PROJECT (oplk_apps CXX) 

CMAKE_MINIMUM_REQUIRED (VERSION 2.8.11)

SET(OPLK_APPS_ROOT_DIR ${CMAKE_SOURCE_DIR}/..)

IF (WIN32)
SET(CONFIG_QT_INSTALL_PATH "C:\\Qt\\Qt5.2.0\\5.2.0\\msvc2010" CACHE PATH "Add the QT installation path as same as the sample")
ELSE(WIN32)
SET(CONFIG_QT_INSTALL_PATH "/opt/Qt5.2.1/5.2.1/gcc" CACHE PATH "Add the QT installation path as same as the sample")
ENDIF (WIN32)

#SET(CONFIG_openPOWERLINK_CUSTOM_LIBSEARH_PATH CACHE PATH "Add the path to openPOWERLINK stack LIBRARIES to find")
#SET(CONFIG_openPOWERLINK_ROOT_DIR "../../openPOWERLINK-V2.0.0"  CACHE PATH "Add the path to openPOWERLINK stack V2.0 or later")
SET(CONFIG_openPOWERLINK_ROOT_DIR "D:/steps/openPOWERLINK_v2.0_QT"  CACHE PATH "Add the path to openPOWERLINK stack V2.0 or later")

SET(OPLK_ROOT_DIR ${CONFIG_openPOWERLINK_ROOT_DIR})
SET(OPLK_INCLUDE_DIR ${OPLK_ROOT_DIR}/stack/include)

INCLUDE_DIRECTORIES (${OPLK_INCLUDE_DIR})

IF(CMAKE_SYSTEM_NAME STREQUAL "Windows")

	SET(CONFIG_openPOWERLINK_BUILD_TYPE ON CACHE INTERNAL
		"Link kernel stack directly into application (Single process solution)")
	UNSET(CFG_KERNEL_STACK_USERSPACE_DAEMON CACHE)

ELSEIF(CMAKE_SYSTEM_NAME STREQUAL "Linux")

	SET(CONFIG_openPOWERLINK_BUILD_TYPE "Link to Application"
		CACHE STRING "Configure how to build the kernel stack")

	SET(openPOWERLINK_StackBuildTypes
		"Link to Application;Linux Userspace Daemon;Linux Kernel Module;None"
		CACHE INTERNAL "List of possible kernel stack build types")

	SET_PROPERTY(CACHE CONFIG_openPOWERLINK_BUILD_TYPE
				 PROPERTY STRINGS ${openPOWERLINK_StackBuildTypes})

	IF (CONFIG_openPOWERLINK_BUILD_TYPE STREQUAL "Link to Application")

		SET (CFG_KERNEL_STACK_DIRECTLINK ON CACHE INTERNAL
			 "Link kernel stack directly into application (Single process solution)")
		UNSET (CFG_KERNEL_STACK_USERSPACE_DAEMON CACHE)
		UNSET (CFG_KERNEL_STACK_KERNEL_MODULE CACHE)

	ELSEIF (CONFIG_openPOWERLINK_BUILD_TYPE STREQUAL "Linux Userspace Daemon")

		SET (CFG_KERNEL_STACK_USERSPACE_DAEMON ON CACHE INTERNAL
			 "Build kernel stack as Linux userspace daemon")
		UNSET (CFG_KERNEL_STACK_DIRECTLINK CACHE)
		UNSET (CFG_KERNEL_STACK_KERNEL_MODULE CACHE)

	ELSEIF (CONFIG_openPOWERLINK_BUILD_TYPE STREQUAL "Linux Kernel Module")

		SET (CFG_KERNEL_STACK_KERNEL_MODULE ON CACHE INTERNAL
			 "Build kernel stack as Linux kernelspace module")
		UNSET (CFG_KERNEL_STACK_USERSPACE_DAEMON CACHE)
		UNSET (CFG_KERNEL_STACK_DIRECTLINK CACHE)
		UNSET (CFG_KERNEL_STACK_DIRECTLINK CACHE)

	ELSEIF (CONFIG_openPOWERLINK_BUILD_TYPE STREQUAL "None")
		UNSET (CFG_KERNEL_STACK_USERSPACE_DAEMON CACHE)
		UNSET (CFG_KERNEL_STACK_KERNEL_MODULE CACHE)

	ENDIF (CONFIG_openPOWERLINK_BUILD_TYPE STREQUAL "Link to Application")

ENDIF (CMAKE_SYSTEM_NAME STREQUAL "Windows")

INCLUDE("${CMAKE_SOURCE_DIR}/findOplk.cmake")

SET(OPLK_INCLUDE_DIR "${CONFIG_OPENPOWERLINK_ROOT_DIR}/stack/include")
SET(OPLK_LIBRARY_DIR "${CONFIG_OPENPOWERLINK_ROOT_DIR}/stack/libs/${CMAKE_SYSTEM_NAME}/${CMAKE_SYSTEM_PROCESSOR}")

#MESSAGE(STATUS "OPLKCFG ${OPLKLIB_CFG_DIR}")

#INCLUDE_DIRECTORIES(${OPLKLIB_CFG_DIR})

if(0)
##################FIND OPLK VERSION NUMBER###############
#MACRO(HEX n)
#  ('0' + ((n)>>28 & 0xF)), \
#  ('0' + ((n)>>24 & 0xF)), \
#  ('0' + ((n)>>20 & 0xF)), \
#  ('0' + ((n)>>16 & 0xF)), \
#  ('0' + ((n)>>12 & 0xF)), \
#  ('0' + ((n)>>8  & 0xF)), \
#  ('0' + ((n)>>4  & 0xF)), \
#  ('0' + ((n)     & 0xF))  \
#ENDMACRO(HEX n)

#IF(OPLK_INCLUDE_DIR)
#	set(OPLKLIB_VERSION "")
#	file(STRINGS "${OPLK_INCLUDE_DIR}/oplk/version.h" _OPLKLIB_VERSION_CONTENTS REGEX "#define PLK_DEFINED_STACK_VERSION")
#	SET(OPLKLIB_VERSION HEX(_OPLKLIB_VERSION_CONTENTS))
#	MESSAGE(STATUS "POWERLINK LIB VERSION" ${OPLKLIB_VERSION})
#ENDIF (OPLK_INCLUDE_DIR)

ENDIF(0)




SET(CMAKE_PREFIX_PATH ${CONFIG_QT_INSTALL_PATH})

MESSAGE( STATUS "CMAKE_CXX_FLAGS: " ${CMAKE_CXX_FLAGS} )

IF (MSVC)
	SET(CMAKE_CXX_FLAGS "/nologo /W3 /WX-")                               # General
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /D_CRT_SECURE_NO_WARNINGS ")  # Preprocessor
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Gm- /EHsc ")                 # Code-Generation
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Zc:wchar_t /GR-")            # Language
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Gd /TP /errorReport:queue ") # Advanced

	SET(CMAKE_CXX_FLAGS_DEBUG            "/MDd /Od /Ob0 /GS  /fp:precise /D_DEBUG /Zi")
	SET(CMAKE_CXX_FLAGS_RELEASE          "/MD  /O2 /Ob2 /GS- /fp:fast    /DNDEBUG")
	SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO   "/MD  /O2 /Ob2 /GS- /fp:fast    /DNDEBUG /Zi")
	SET(CMAKE_CXX_FLAGS_MINSIZEREL       "/MD  /O1 /Ob1 /GS- /fp:fast    /DNDEBUG")
ELSEIF (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
  	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -pedantic -Weffc++ -std=c++03")
	SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDEBUG")
	SET(INSTALL_DIR "${CMAKE_BINARY_DIR}/bin")
ENDIF (MSVC)


IF(CMAKE_SYSTEM_NAME STREQUAL "Windows")
    IF(CMAKE_CL_64)
        LINK_DIRECTORIES(${CONTRIB_SOURCE_DIR}/pcap/windows/WpdPack/Lib/x64)
    ELSE ()
        LINK_DIRECTORIES(${CONTRIB_SOURCE_DIR}/pcap/windows/WpdPack/Lib)
    ENDIF()
    INCLUDE_DIRECTORIES(${CONTRIB_SOURCE_DIR}/pcap/windows/WpdPack/Include)
    SET(PCAP_LIBRARIES wpcap iphlpapi)
ENDIF ()



SET(CMAKE_CONFIGURATION_TYPES "Debug;Release" CACHE INTERNAL "Available Build Configurations" FORCE)

IF(NOT CMAKE_GENERATOR MATCHES "Visual Studio")
    IF(NOT CMAKE_BUILD_TYPE)
      SET(CMAKE_BUILD_TYPE Release CACHE STRING
          "Choose the type of build, options are: None Debug Release"
          FORCE)
    ENDIF()
ENDIF()

OPTION (CONFIG_OPLK_QT_WRAPPER "Build OPLK QT API library" ON)

IF(${CONFIG_OPLK_QT_WRAPPER})
	IF (MSVC)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /w34100 /w34189 /Zm200 ")     # from Qt-Creator build
	ENDIF (MSVC)

	MESSAGE( STATUS "CMAKE_CXX_FLAGS: " ${CMAKE_CXX_FLAGS} )

	IF (WIN32)
		ADD_DEFINITIONS (-DWIN32)
		#${QT_DEFINITIONS} 
	ELSE(WIN32)
		#TODO
	ENDIF (WIN32)

	SET(OPLK_QT_API_LIB_DIR ${CMAKE_SOURCE_DIR}/plk_qt_api)
	SET(OPLK_QT_API_LIB_INCLUDE_DIR ${OPLK_QT_API_LIB_DIR}/include)
	SET(OPLK_QT_API_LIB_SOURCE_DIR ${OPLK_QT_API_LIB_DIR}/src)

	ADD_SUBDIRECTORY(plk_qt_api)
ElSEIF()
	UNSET(CONFIG_OPLK_QT_API_LIB CACHE)
	UNSET(CONFIG_OPLK_QT_API_WINDOWS_DLL CACHE)
ENDIF(${CONFIG_OPLK_QT_WRAPPER})
